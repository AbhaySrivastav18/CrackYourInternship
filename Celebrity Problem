/A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people. A square matrix mat is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1./

// Approach 1

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
// Function to find if there is a celebrity in the party or not.
int celebrity(vector<vector<int> >& mat) {
int n = mat.size();

        vector<int> knowMe(n,0),Iknow(n,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==1){
                    knowMe[j]++;
                    Iknow[i]++;
                }
            }
        }

        for(int i=0;i<n;i++){
            if(knowMe[i]==n-1 && Iknow[i]==0){
                return i;
            }
        }
        return -1;
    }

};

int main() {
int t;
cin >> t;
while (t--) {
int n;
cin >> n;
vector<vector<int> > M(n, vector<int>(n, 0));
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
cin >> M[i][j];
}
}
Solution ob;
cout << ob.celebrity(M) << endl;
}
}

// Approach 2

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
// Function to find if there is a celebrity in the party or not.
int celebrity(vector<vector<int> >& mat) {
int n=mat.size();
int top =0;
int down=n-1;

        while(top<down){
            if(mat[top][down]==1){
                top++;
            }
            else if(mat[down][top]==1){
                down--;
            }
            else{
                top++;
                down--;
            }
        }
        if(top>down){
            return -1;
        }
        for(int i=0;i<n;i++){
            if(i==top){
                continue;
            }
            if(mat[top][i]==0 && mat[i][top]==1){
            }
            else{
                return -1;
            }
        }
        return top;
    }

};

int main() {
int t;
cin >> t;
while (t--) {
int n;
cin >> n;
vector<vector<int> > M(n, vector<int>(n, 0));
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
cin >> M[i][j];
}
}
Solution ob;
cout << ob.celebrity(M) << endl;
    }
}
